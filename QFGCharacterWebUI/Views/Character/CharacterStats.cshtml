@model QfgCharacterLibrary.QfgCharacter

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "QFG Character Editor";
    ViewBag.SelectedTab = "CharacterStats";
}

<script type="text/javascript">
    $(document).ready(function () {
        $("#mainForm").validate({
            errorPlacement: function (error, element) {
                var errorText = error.text();

                if (errorText == "") {
                    if (element.next("span") != null) {
                        element.next("span").remove();
                    }
                }
                else {
                    if (element.next("span").html() != "*") {
                        element.parent().append("<span style='color:red;font-weight:bold'>*</span>").attr('title', errorText);
                    }
                    //element.next("span").css("display", "inline").attr('title', error.text());
                }
            },
            success: function (label) {
                if (label.next("span") != null) {
                    label.next("span").remove();
                }
            }
        });

        jQuery.validator.addClassRules("inputStat", {
            required: true,
            range: [0,100]
        });

        //$(".inputStat").each(function () {
        //    $(this).rules("add", {
        //        required: true,
        //        number: true,
        //        max: 100,
        //        min: 0,
        //        messages: {
        //            required: "You must specify a value",
        //            number: "Value must be numeric",
        //            min: jQuery.format("Value cannot be less than {0}"),
        //            max: jQuery.format("Value must not be greater than {0}")
        //        }
        //    });
        //});
    });
</script>

@*@Html.Partial("_Toolbar", ViewData.Model)*@

<form id="mainForm" method="post" action="">
    <table cellpadding="0" cellspacing="0" border="0" class="tableData">
    <tr>
        <td class="tblHeading">Strength:</td>
        <td>
            @Html.TextBoxFor(x => x.Strength, new { @maxlength=3, @class="inputStat" })
        </td>
        <td class="tblHeadingSpacer"></td>
        <td class="tblHeading">Weapon Use:</td>
        <td>
            @Html.TextBoxFor(x => x.WeaponUse, new { @maxlength=3, @class="inputStat" })
        </td>
    </tr>
    <tr>
        <td class="tblHeading">Intelligence:</td>
        <td>
            @Html.TextBoxFor(x => x.Intelligence, new { @maxlength=3, @class="inputStat" })
        </td>
        <td class="tblHeadingSpacer"></td>
        <td class="tblHeading">Parry:</td>
        <td>
            @Html.TextBoxFor(x => x.Parry, new { @maxlength=3, @class="inputStat" })
        </td>
    </tr>
    <tr>
        <td class="tblHeading">Agility:</td>
        <td>
            @Html.TextBoxFor(x => x.Agility, new { @maxlength=3, @class="inputStat" })
        </td>
        <td class="tblHeadingSpacer"></td>
        <td class="tblHeading">Dodge:</td>
        <td>
            @Html.TextBoxFor(x => x.Dodge, new { @maxlength=3, @class="inputStat" })
        </td>
    </tr>
    <tr>
        <td class="tblHeading">Vitality:</td>
        <td>
            @Html.TextBoxFor(x => x.Vitality, new { @maxlength=3, @class="inputStat" })
        </td>
        <td class="tblHeadingSpacer"></td>
        <td class="tblHeading">Stealth:</td>
        <td>
            @Html.TextBoxFor(x => x.Stealth, new { @maxlength=3, @class="inputStat" })
        </td>
    </tr>
    <tr>
        <td class="tblHeading">Luck:</td>
        <td>
            @Html.TextBoxFor(x => x.Luck, new { @maxlength=3, @class="inputStat" })
        </td>
        <td class="tblHeadingSpacer"></td>
        <td class="tblHeading">Pick Locks:</td>
        <td>
            @Html.TextBoxFor(x => x.PickLocks, new { @maxlength=3, @class="inputStat" })
        </td>
    </tr>
    <tr>
        <td class="tblHeading">Comm:</td>
        <td>
            @Html.TextBoxFor(x => x.Communication, (Model.CommunicationEnabled) ? (object)new { @maxlength=3, @class="inputStat"} : (object)new { @maxlength=3, @class="inputStat", @disabled="disabled" })
        </td>
        <td class="tblHeadingSpacer"></td>
        <td class="tblHeading">Throwing:</td>
        <td>
            @Html.TextBoxFor(x => x.Throwing, new { @maxlength=3, @class="inputStat" })
        </td>
    </tr>
    <tr>
        <td class="tblHeading"></td>
        <td></td>
        <td class="tblHeadingSpacer"></td>
        <td class="tblHeading">Climbing:</td>
        <td>
            @Html.TextBoxFor(x => x.Climbing, new { @maxlength=3, @class="inputStat" })
        </td>
    </tr>
    <tr>
        <td class="tblHeading"></td>
        <td></td>
        <td class="tblHeadingSpacer"></td>
        <td class="tblHeading">Magic:</td>
        <td>
            @Html.TextBoxFor(x => x.Magic, new { @maxlength=3, @class="inputStat" })
        </td>
    </tr>
    <tr>
        <td class="tblHeading"></td>
        <td></td>
        <td class="tblHeadingSpacer"></td>
        <td class="tblHeading">Acrobatics:</td>
        <td>
            @Html.TextBoxFor(x => x.Acrobatics, (Model.AcrobaticsEnabled) ? (object)new { @maxlength=3, @class="inputStat"} : (object)new { @maxlength=3, @class="inputStat", @disabled="disabled" })
        </td>
    </tr>
    </table>
    @Html.HiddenFor(x => x.InventoryDaggers)
    @Html.HiddenFor(x => x.InventoryHealingPotions)
    @Html.HiddenFor(x => x.InventoryMagicPotions)
    @Html.HiddenFor(x => x.InventoryVigorPotions)
    @Html.HiddenFor(x => x.MagicSkillCalm)
    @Html.HiddenFor(x => x.MagicSkillDazzle)
    @Html.HiddenFor(x => x.MagicSkillDetect)
    @Html.HiddenFor(x => x.MagicSkillFetch)
    @Html.HiddenFor(x => x.MagicSkillFlame)
    @Html.HiddenFor(x => x.MagicSkillForceBolt)
    @Html.HiddenFor(x => x.MagicSkillLevitate)
    @Html.HiddenFor(x => x.MagicSkillOpen)
    @Html.HiddenFor(x => x.MagicSkillReversal)
    @Html.HiddenFor(x => x.MagicSkillTrigger)
    @Html.HiddenFor(x => x.MagicSkillZap)

    @Html.HiddenFor(x => x.CharacterName)
    @Html.HiddenFor(x => x.QfgClass)
    @Html.HiddenFor(x => x.QfgGame)
</form>